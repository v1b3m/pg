index ae82d26340..e80e293b66 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -309,8 +309,15 @@ class Collector:
                         sender=model, instance=obj, using=self.using
                     )
 
-            # fast deletes
+            # fast deletes, combine by model
+            fast_deletes_by_model = {}
             for qs in self.fast_deletes:
+                if qs.model in fast_deletes_by_model:
+                    # combine queries using OR
+                    fast_deletes_by_model[qs.model] = fast_deletes_by_model[qs.model] | qs
+                else:
+                    fast_deletes_by_model[qs.model] = qs
+            for qs in fast_deletes_by_model.values():
                 count = qs._raw_delete(using=self.using)
                 deleted_counter[qs.model._meta.label] += count
 
diff --git a/tests/delete/tests.py b/tests/delete/tests.py
index 505fd843d7..464f4fd0a4 100644
--- a/tests/delete/tests.py
+++ b/tests/delete/tests.py
@@ -335,10 +335,9 @@ class DeletionTests(TestCase):
         batch_size = connection.ops.bulk_batch_size(['pk'], objs)
         # The related fetches are done in batches.
         batches = ceil(len(objs) / batch_size)
-        # One query for Avatar.objects.all() and then one related fast delete for
-        # each batch.
-        fetches_to_mem = 1 + batches
-        # The Avatar objects are going to be deleted in batches of GET_ITERATOR_CHUNK_SIZE
+        # One query for Avatar.objects.all() and one related fast delete combined and
+        # then deletion of Avatar objects in batches of GET_ITERATOR_CHUNK_SIZE.
+        fetches_to_mem = 1 + 1
         queries = fetches_to_mem + TEST_SIZE // GET_ITERATOR_CHUNK_SIZE
         self.assertNumQueries(queries, Avatar.objects.all().delete)
         self.assertFalse(Avatar.objects.exists())
@@ -355,8 +354,9 @@ class DeletionTests(TestCase):
         # + 1 (select related `U` instances)
         # + TEST_SIZE / GET_ITERATOR_CHUNK_SIZE (delete `T` instances in batches)
         # + 1 (delete `s`)
-        expected_num_queries = ceil(TEST_SIZE / batch_size)
-        expected_num_queries += ceil(TEST_SIZE / GET_ITERATOR_CHUNK_SIZE) + 2
+        # One query to select related `T` instances, one query to fast delete related `U` instances,
+        # then deletion of `T` instances in batches, and one query to delete `s`.
+        expected_num_queries = 1 + ceil(TEST_SIZE / GET_ITERATOR_CHUNK_SIZE) + 2
 
         self.assertNumQueries(expected_num_queries, s.delete)
         self.assertFalse(S.objects.exists())
