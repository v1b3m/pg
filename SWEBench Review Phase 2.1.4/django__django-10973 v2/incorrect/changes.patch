index 7fca6eff30..d5d2b91e6e 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -19,13 +19,11 @@ class DatabaseClient(BaseDatabaseClient):
     @classmethod
     def runshell_db(cls, conn_params):
         args = [cls.executable_name]
-
         host = conn_params.get('host', '')
         port = conn_params.get('port', '')
         dbname = conn_params.get('database', '')
         user = conn_params.get('user', '')
         passwd = conn_params.get('password', '')
-
         if user:
             args += ['-U', user]
         if host:
@@ -33,39 +31,16 @@ class DatabaseClient(BaseDatabaseClient):
         if port:
             args += ['-p', str(port)]
         args += [dbname]
-
-        temp_pgpass = None
+        env = None
+        if passwd:
+            env = os.environ.copy()
+            env['PGPASSWORD'] = str(passwd)
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
-            if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
-            # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            subprocess.run(args, env=env, check=True)
         finally:
-            # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
         DatabaseClient.runshell_db(self.connection.get_connection_params())
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index 0d4f28554d..ade284ed54 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -10,24 +10,21 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
 
     def _run_it(self, dbinfo):
         """
-        That function invokes the runshell command, while mocking
-        subprocess.call. It returns a 2-tuple with:
-        - The command line list
-        - The content of the file pointed by environment PGPASSFILE, or None.
+        Invoke runshell_db while mocking subprocess.run. Returns (args_list, pgpassword_value)
         """
-        def _mock_subprocess_call(*args):
-            self.subprocess_args = list(*args)
-            if 'PGPASSFILE' in os.environ:
-                with open(os.environ['PGPASSFILE']) as f:
-                    self.pgpass = f.read().strip()  # ignore line endings
+        def _mock_subprocess_run(*args, **kwargs):
+            self.subprocess_args = list(args[0])
+            env = kwargs.get('env')
+            if env and 'PGPASSWORD' in env:
+                self.pgpassword = env['PGPASSWORD']
             else:
-                self.pgpass = None
+                self.pgpassword = None
             return 0
         self.subprocess_args = None
-        self.pgpass = None
-        with mock.patch('subprocess.call', new=_mock_subprocess_call):
+        self.pgpassword = None
+        with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db(dbinfo)
-        return self.subprocess_args, self.pgpass
+        return self.subprocess_args, self.pgpassword
 
     def test_basic(self):
         self.assertEqual(
@@ -39,7 +36,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:someuser:somepassword',
+                'somepassword',
             )
         )
 
@@ -66,7 +63,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
-                '\\:\\:1:444:dbname:some\\:user:some\\:password',
+                'some:password',
             )
         )
 
@@ -80,14 +77,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'some\\user', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:some\\\\user:some\\\\password',
+                'some\\password',
             )
         )
 
     def test_accent(self):
         username = 'rôle'
         password = 'sésame'
-        pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)
+        pgpass_string = password
         self.assertEqual(
             self._run_it({
                 'database': 'dbname',
@@ -103,14 +100,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
 
     def test_sigint_handler(self):
         """SIGINT is ignored in Python and passed to psql to abort quries."""
-        def _mock_subprocess_call(*args):
+        def _mock_subprocess_run(*args, **kwargs):
             handler = signal.getsignal(signal.SIGINT)
             self.assertEqual(handler, signal.SIG_IGN)
 
         sigint_handler = signal.getsignal(signal.SIGINT)
         # The default handler isn't SIG_IGN.
         self.assertNotEqual(sigint_handler, signal.SIG_IGN)
-        with mock.patch('subprocess.check_call', new=_mock_subprocess_call):
+        with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db({})
         # dbshell restores the original handler.
         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))
