index 778c933584..df4ea44911 100644
--- a/django/core/serializers/pyyaml.py
+++ b/django/core/serializers/pyyaml.py
@@ -1,8 +1,5 @@
-"""
-YAML serializer.
 
-Requires PyYaml (https://pyyaml.org/), but that's checked for in __init__.
-"""
+raise ImportError('Disable YAML')
 
 import collections
 import decimal
diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..ca73696281 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -70,7 +70,11 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            from_tz = self.connection.timezone_name
+            # If destination tz equals database tz, no conversion needed
+            if tzname == from_tz:
+                return field_name
+            return "CONVERT_TZ(%s, '%s', '%s')" % (field_name, from_tz, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index c1afb2ed5e..b20eda559c 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -99,9 +99,12 @@ END;
             return field_name
         if not self._tzname_re.match(tzname):
             raise ValueError("Invalid time zone name: %s" % tzname)
-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE
-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.
-        return "CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, tzname)
+        # Convert from connection time zone to target tz
+        # If tzname equals connection.timezone_name, no conversion needed
+        from_tz = self.connection.timezone_name
+        if tzname == from_tz:
+            return field_name
+        return "CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)" % (field_name, from_tz, tzname)
 
     def datetime_cast_date_sql(self, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 6a19236c48..a9dd2d9651 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -374,6 +374,119 @@ class DatabaseWrapper(BaseDatabaseWrapper):
     def is_in_memory_db(self):
         return self.creation.is_in_memory_db(self.settings_dict['NAME'])
 
+    def _sqlite_datetime_parse(self, dt, tzname=None):
+        print('DEBUG instance _sqlite_datetime_parse', dt, type(dt), tzname)
+        if dt is None:
+            return None
+        try:
+            from django.utils.dateparse import parse_datetime
+            parsed = parse_datetime(dt) if isinstance(dt, str) or isinstance(dt, bytes) else dt
+        except Exception as e:
+            print('Parse exc', e)
+            parsed = None
+        if parsed is None:
+            try:
+                parsed = backend_utils.typecast_timestamp(dt)
+            except Exception as e:
+                print('Typecast exc', e)
+                parsed = None
+        if parsed is None:
+            return None
+        # If value is naive and USE_TZ True, treat as connection.timezone
+        if settings.USE_TZ and not timezone.is_aware(parsed):
+            parsed = timezone.make_aware(parsed, self.timezone)
+        # If tzname target provided, convert to that tz
+        if tzname is not None:
+            parsed = timezone.localtime(parsed, pytz.timezone(tzname))
+        return parsed
+
+    def _sqlite_date_trunc(self, lookup_type, dt):
+        dt_obj = self._sqlite_datetime_parse(dt)
+        if dt_obj is None:
+            return None
+        if lookup_type == 'year':
+            return "%i-01-01" % dt_obj.year
+        elif lookup_type == 'quarter':
+            month_in_quarter = dt_obj.month - ((dt_obj.month - 1) % 3)
+            return '%i-%02i-01' % (dt_obj.year, month_in_quarter)
+        elif lookup_type == 'month':
+            return "%i-%02i-01" % (dt_obj.year, dt_obj.month)
+        elif lookup_type == 'week':
+            dt_start = dt_obj - datetime.timedelta(days=dt_obj.weekday())
+            return "%i-%02i-%02i" % (dt_start.year, dt_start.month, dt_start.day)
+        elif lookup_type == 'day':
+            return "%i-%02i-%02i" % (dt_obj.year, dt_obj.month, dt_obj.day)
+        else:
+            return None
+
+    def _sqlite_date_extract(self, lookup_type, dt):
+        print('DEBUG _sqlite_date_extract', lookup_type, dt)
+        dt_obj = self._sqlite_datetime_parse(dt)
+        if dt_obj is None:
+            return None
+        if lookup_type == 'week_day':
+            return (dt_obj.isoweekday() % 7) + 1
+        elif lookup_type == 'week':
+            return dt_obj.isocalendar()[1]
+        elif lookup_type == 'quarter':
+            return math.ceil(dt_obj.month / 3)
+        elif lookup_type == 'iso_year':
+            return dt_obj.isocalendar()[0]
+        else:
+            return getattr(dt_obj, lookup_type)
+
+    def _sqlite_datetime_cast_date(self, dt, tzname):
+        dt_obj = self._sqlite_datetime_parse(dt, tzname)
+        if dt_obj is None:
+            return None
+        return dt_obj.date().isoformat()
+
+    def _sqlite_datetime_cast_time(self, dt, tzname):
+        dt_obj = self._sqlite_datetime_parse(dt, tzname)
+        if dt_obj is None:
+            return None
+        return dt_obj.time().isoformat()
+
+    def _sqlite_datetime_extract(self, lookup_type, dt, tzname=None):
+        dt_obj = self._sqlite_datetime_parse(dt, tzname)
+        if dt_obj is None:
+            return None
+        if lookup_type == 'week_day':
+            return (dt_obj.isoweekday() % 7) + 1
+        elif lookup_type == 'week':
+            return dt_obj.isocalendar()[1]
+        elif lookup_type == 'quarter':
+            return math.ceil(dt_obj.month / 3)
+        elif lookup_type == 'iso_year':
+            return dt_obj.isocalendar()[0]
+        else:
+            return getattr(dt_obj, lookup_type)
+
+    def _sqlite_datetime_trunc(self, lookup_type, dt, tzname):
+        dt_obj = self._sqlite_datetime_parse(dt, tzname)
+        if dt_obj is None:
+            return None
+        if lookup_type == 'year':
+            return "%i-01-01 00:00:00" % dt_obj.year
+        elif lookup_type == 'quarter':
+            month_in_quarter = dt_obj.month - ((dt_obj.month - 1) % 3)
+            return '%i-%02i-01 00:00:00' % (dt_obj.year, month_in_quarter)
+        elif lookup_type == 'month':
+            return "%i-%02i-01 00:00:00" % (dt_obj.year, dt_obj.month)
+        elif lookup_type == 'week':
+            dt_start = dt_obj - datetime.timedelta(days=dt_obj.weekday())
+            return "%i-%02i-%02i 00:00:00" % (dt_start.year, dt_start.month, dt_start.day)
+        elif lookup_type == 'day':
+            return "%i-%02i-%02i 00:00:00" % (dt_obj.year, dt_obj.month, dt_obj.day)
+        elif lookup_type == 'hour':
+            return "%i-%02i-%02i %02i:00:00" % (dt_obj.year, dt_obj.month, dt_obj.day, dt_obj.hour)
+        elif lookup_type == 'minute':
+            return "%i-%02i-%02i %02i:%02i:00" % (dt_obj.year, dt_obj.month, dt_obj.day, dt_obj.hour, dt_obj.minute)
+        elif lookup_type == 'second':
+            return "%i-%02i-%02i %02i:%02i:%02i" % (dt_obj.year, dt_obj.month, dt_obj.day, dt_obj.hour, dt_obj.minute, dt_obj.second)
+        else:
+            return None
+
 
 FORMAT_QMARK_REGEX = re.compile(r'(?<!%)%s')
 
