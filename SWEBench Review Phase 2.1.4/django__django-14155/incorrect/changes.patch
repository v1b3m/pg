index 9b00e24509..5ef419229b 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -31,6 +31,34 @@ from .utils import get_callable
 
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
+        # Unwrap functools.partial objects to underlying function and include static arguments.
+        if isinstance(func, functools.partial):
+            # Flatten nested partial functions
+            static_args = []
+            static_kwargs = {}
+            # Collect static args/kwargs by traversing partials
+            current_func = func
+            while isinstance(current_func, functools.partial):
+                # combine current partial's static values
+                # Underlying partial arguments come before already collected ones
+                # For args: Prepend underlying partial's args to current static_args
+                static_args = list(current_func.args) + list(static_args)
+                # For kwargs: Underlying partial keywords come first, then override with current
+                temp_kwargs = current_func.keywords or {}
+                # But static_kwargs currently collected from outer partial represents overrides
+                new_kwargs = dict(temp_kwargs)
+                new_kwargs.update(static_kwargs)
+                static_kwargs = new_kwargs
+                current_func = current_func.func
+            # current_func is now the actual underlying callable
+            func_to_use = current_func
+            # Prepend static_args to resolved args
+            args = tuple(static_args) + tuple(args)
+            # Merge static_kwargs and resolved kwargs (resolved kwargs should override static if conflict)
+            merged_kwargs = dict(static_kwargs)
+            merged_kwargs.update(kwargs)
+            kwargs = merged_kwargs
+            func = func_to_use
         self.func = func
         self.args = args
         self.kwargs = kwargs
@@ -38,8 +66,7 @@ class ResolverMatch:
         self.route = route
         self.tried = tried
 
-        # If a URLRegexResolver doesn't have a namespace or app_name, it passes
-        # in an empty value.
+        # If a URLRegexResolver doesn't have a namespace or app_name, it passes in an empty value.
         self.app_names = [x for x in app_names if x] if app_names else []
         self.app_name = ':'.join(self.app_names)
         self.namespaces = [x for x in namespaces if x] if namespaces else []
@@ -50,7 +77,11 @@ class ResolverMatch:
             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            # Qualname if present else name
+            try:
+                self._func_path = func.__module__ + '.' + func.__qualname__
+            except AttributeError:
+                self._func_path = func.__module__ + '.' + func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
