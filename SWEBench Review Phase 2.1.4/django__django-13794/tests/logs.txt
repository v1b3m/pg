Testing against Django installed in '/testbed/django'
Importing application utils_tests
Importing application template_tests
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_add01 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add02 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add03 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add04 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add05 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add06 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add07 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add08 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add09 (template_tests.filter_tests.test_add.AddTests) ... ok
test_add (template_tests.filter_tests.test_add.FunctionTests) ... ok
test_cached_property (utils_tests.test_functional.FunctionalTests)
cached_property caches its value and behaves like a property. ... ok
test_cached_property_auto_name (utils_tests.test_functional.FunctionalTests) ... ok
test_cached_property_reuse_different_names (utils_tests.test_functional.FunctionalTests)
Disallow this case because the decorated function wouldn't be cached. ... ok
test_cached_property_reuse_same_name (utils_tests.test_functional.FunctionalTests) ... ok
test_cached_property_set_name_not_called (utils_tests.test_functional.FunctionalTests) ... ok
test_classproperty_getter (utils_tests.test_functional.FunctionalTests) ... ok
test_classproperty_override_getter (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_add (utils_tests.test_functional.FunctionalTests) ... ERROR
test_lazy_base_class (utils_tests.test_functional.FunctionalTests)
lazy also finds base class methods in the proxy object ... ok
test_lazy_base_class_override (utils_tests.test_functional.FunctionalTests)
lazy finds the correct (overridden) method implementation ... ok
test_lazy_class_preparation_caching (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_equality (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_object_to_string (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_repr_bytes (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_repr_int (utils_tests.test_functional.FunctionalTests) ... ok
test_lazy_repr_text (utils_tests.test_functional.FunctionalTests) ... ok

======================================================================
ERROR: test_lazy_add (utils_tests.test_functional.FunctionalTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/utils_tests/test_functional.py", line 190, in test_lazy_add
    self.assertEqual(lazy_4() + lazy_5(), 9)
TypeError: unsupported operand type(s) for +: '__proxy__' and '__proxy__'

----------------------------------------------------------------------
Ran 27 tests in 0.011s

FAILED (errors=1)
+ git checkout fe886eee36be8022f34cfe59aa61ff1c21fe01d9 tests/template_tests/filter_tests/test_add.py tests/utils_tests/test_functional.py
Updated 2 paths from 64ee9d3cf6

