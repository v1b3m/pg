index 155330c596..c00cd523a1 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -5,7 +5,7 @@ from django.apps import apps as django_apps
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
@@ -199,9 +199,22 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                session_hash_verified = False
+                if session_hash:
+                    # Compare with current secret
+                    if constant_time_compare(session_hash, user.get_session_auth_hash()):
+                        session_hash_verified = True
+                    else:
+                        # Try with fallback secrets
+                        for fallback_key in getattr(settings, "SECRET_KEY_FALLBACKS", []) or []:
+                            # Compute the hash for this fallback key
+                            key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+                            fallback_hexdigest = salted_hmac(key_salt, user.password, secret=fallback_key, algorithm="sha256").hexdigest()
+                            if constant_time_compare(session_hash, fallback_hexdigest):
+                                session_hash_verified = True
+                                # Update the session hash to use current secret for future verification
+                                request.session[HASH_SESSION_KEY] = user.get_session_auth_hash()
+                                break
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
diff --git a/tests/auth_tests/test_basic.py b/tests/auth_tests/test_basic.py
index 4b491e521e..57562702b2 100644
--- a/tests/auth_tests/test_basic.py
+++ b/tests/auth_tests/test_basic.py
@@ -138,3 +138,29 @@ class TestGetUser(TestCase):
         user = get_user(request)
         self.assertIsInstance(user, User)
         self.assertEqual(user.username, created_user.username)
+
+    def test_session_auth_hash_secret_key_fallbacks(self):
+        # Create a user
+        u = User.objects.create_user("rotate", "rotate@example.com", "rotpwd")
+        # Simulate login with old secret
+        with self.settings(SECRET_KEY="oldsecret", SECRET_KEY_FALLBACKS=[]):
+            self.client.login(username="rotate", password="rotpwd")
+            session = self.client.session
+            h = session.get("_auth_user_hash")
+            # Compute expected salted_hmac with oldsecret
+            from django.utils.crypto import salted_hmac
+            key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+            expected = salted_hmac(key_salt, u.password, secret="oldsecret", algorithm="sha256").hexdigest()
+            self.assertEqual(h, expected)
+        # New secret with fallback oldsecret
+        with self.settings(SECRET_KEY="newsecret", SECRET_KEY_FALLBACKS=["oldsecret"]):
+            request = HttpRequest()
+            request.session = self.client.session
+            user = get_user(request)
+            self.assertEqual(user, u)
+            # Session hash updated to new secret
+            new_hash = request.session.get("_auth_user_hash")
+            expected_new = salted_hmac(key_salt, u.password, secret="newsecret", algorithm="sha256").hexdigest()
+            self.assertEqual(new_hash, expected_new)
+            # Save session modifications to persist
+            request.session.save()
